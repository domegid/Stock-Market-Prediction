#setting up the working directory in which the dataset is present
setwd("F:/DA Project")
#reading the first 100000 rows of the dataset
data = read.csv ("Data.csv",nrows=100000)
#reading the date column as date in R
data[,1] = as.Date(data[,1])
#checking summary and dimension of the data frame
summary(data)
dim(data)
head(data)
#checking for missing values
summary(is.na(data))
#as no missing values are there, now checking for outliers
boxplot(data[,c('open','close','low','high')])
boxplot(data[,c('open','close','low','high','volume')])
#replacing outliers with null value
for(x in c('open','close','low','high','volume')){
val = data[,x][data[,x] %in% boxplot.stats(data[,x])$out]
data[,x][data[,x] %in% val] = NA
}
#checking if outliers are removed
boxplot(data[,c('open','close','low','high')])
boxplot(data[,c('open','close','low','high','volume')])
#dropping rows with null values
library(tidyr)
data=drop_na(data)
dim(data)
#confirming that no null values are present
as.data.frame(colSums(is.na(data)))
#libraries for data visualization
install.packages("quantmod")
install.packages("ggplot2")
library(quantmod)
library(ggplot2)
data1 = subset(data, symbol == "TSCO")
#data visualization
ggplot(data1, aes(x = data1[,1], y = data1[,3])) + geom_line(color = "darkblue") + ggtitle("TSCO Open Price Series") + xlab("Date") + ylab("Open Price") + theme(plot.title = element_text(hjust = 0.5)) + scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
ggplot(data, aes(x = data[,1], y = data[,6])) + geom_line(color = "darkblue") + ggtitle("Highest Price vs Date") + xlab("Date") + ylab("Highest Price") + theme(plot.title = element_text(hjust = 0.5)) + scale_x_date(date_labels = "%b %y", date_breaks = "6 months")
ggplot(data, aes(x = data[,2], y = data[,6])) + geom_line(color = "darkblue") + ggtitle("Highest Price vs Symbol") + xlab("Symbol") + ylab("Highest Price") + theme(plot.title = element_text(hjust = 0.5))
ggplot(data, aes(x = data[,1])) +
geom_line(aes(y = open, color = "open")) + ggtitle("Prices series") +
geom_line(aes(y = close, color = "close")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("open"="gray40", "close"="firebrick4"))
ggplot(data1, aes(x = data1[,1])) +
geom_line(aes(y = open, color = "open")) + ggtitle("Prices series") +
geom_line(aes(y = close, color = "close")) + xlab("Date") + ylab("Price") +
theme(plot.title = element_text(hjust = 0.5), panel.border = element_blank()) +
scale_x_date(date_labels = "%b %y", date_breaks = "3 months") +
scale_colour_manual("Series", values=c("open"="gray40", "close"="firebrick4"))
plot(data1[,4], main = "Closing Prices")
#splitting data into tain and test data in 80-20 ratio
index <- sample(1:nrow(data), size=0.2*nrow(data))
test <- data[index, ]
train <- data[-index, ]
#random forest algorithm
install.packages('randomForest')
library(randomForest)
#training the model using training data
#n=100 i.e 100 decision trees will randomly be formed 
#mtry = 4 meaning every time randomly subset of 4 attributes will be used
#total of 5 attributes are used to prepare the model (low,high,open,close,volume)
model <- randomForest(as.factor(class)~ +low+high+open+close+volume, train, importance=TRUE, ntree=100, mtry=4)
print(model)
attributes(model)
library(caret)
#testing our model
p2 = predict(model,test)
#getting the confusion matrix and accuracy
confusionMatrix(p2,as.factor(test$class))
